//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "evolution_chains")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub baby_trigger_item_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::items::Entity",
        from = "Column::BabyTriggerItemId",
        to = "super::items::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Items,
    #[sea_orm(has_many = "super::pokemon_species::Entity")]
    PokemonSpecies,
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl Related<super::pokemon_species::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonSpecies.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
