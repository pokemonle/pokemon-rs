//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "version_group_names")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub version_group_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub local_language_id: i32,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::languages::Entity",
        from = "Column::LocalLanguageId",
        to = "super::languages::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Languages,
    #[sea_orm(
        belongs_to = "super::version_groups::Entity",
        from = "Column::VersionGroupId",
        to = "super::version_groups::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    VersionGroups,
}

impl Related<super::languages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Languages.def()
    }
}

impl Related<super::version_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VersionGroups.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
