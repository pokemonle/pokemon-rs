//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "moves")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub identifier: String,
    pub generation_id: i32,
    pub type_id: Option<i32>,
    pub power: Option<i32>,
    pub pp: Option<i32>,
    pub accuracy: Option<i32>,
    pub priority: i32,
    pub target_id: i32,
    pub damage_class_id: i32,
    pub effect_id: Option<i32>,
    pub effect_chance: Option<i32>,
    pub contest_type_id: Option<i32>,
    pub contest_effect_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contest_effects::Entity",
        from = "Column::ContestEffectId",
        to = "super::contest_effects::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ContestEffects,
    #[sea_orm(
        belongs_to = "super::contest_types::Entity",
        from = "Column::ContestTypeId",
        to = "super::contest_types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ContestTypes,
    #[sea_orm(
        belongs_to = "super::generations::Entity",
        from = "Column::GenerationId",
        to = "super::generations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Generations,
    #[sea_orm(
        belongs_to = "super::move_damage_classes::Entity",
        from = "Column::DamageClassId",
        to = "super::move_damage_classes::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    MoveDamageClasses,
    #[sea_orm(
        belongs_to = "super::move_effects::Entity",
        from = "Column::EffectId",
        to = "super::move_effects::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    MoveEffects,
    #[sea_orm(has_many = "super::move_flavor_text::Entity")]
    MoveFlavorText,
    #[sea_orm(has_many = "super::move_names::Entity")]
    MoveNames,
    #[sea_orm(
        belongs_to = "super::move_targets::Entity",
        from = "Column::TargetId",
        to = "super::move_targets::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    MoveTargets,
    #[sea_orm(has_many = "super::pokemon_moves::Entity")]
    PokemonMoves,
    #[sea_orm(
        belongs_to = "super::types::Entity",
        from = "Column::TypeId",
        to = "super::types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Types,
}

impl Related<super::contest_effects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContestEffects.def()
    }
}

impl Related<super::contest_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContestTypes.def()
    }
}

impl Related<super::generations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Generations.def()
    }
}

impl Related<super::move_damage_classes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveDamageClasses.def()
    }
}

impl Related<super::move_effects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveEffects.def()
    }
}

impl Related<super::move_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveFlavorText.def()
    }
}

impl Related<super::move_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveNames.def()
    }
}

impl Related<super::move_targets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveTargets.def()
    }
}

impl Related<super::pokemon_moves::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonMoves.def()
    }
}

impl Related<super::types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Types.def()
    }
}

impl Related<super::languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::move_names::Relation::Languages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::move_names::Relation::Moves.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
