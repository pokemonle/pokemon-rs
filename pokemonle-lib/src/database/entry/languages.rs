//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "languages")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub iso639: String,
    pub iso3166: String,
    pub identifier: String,
    pub official: bool,
    pub order: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ability_flavor_text::Entity")]
    AbilityFlavorText,
    #[sea_orm(has_many = "super::ability_names::Entity")]
    AbilityNames,
    #[sea_orm(has_many = "super::berry_firmness_names::Entity")]
    BerryFirmnessNames,
    #[sea_orm(has_many = "super::generation_names::Entity")]
    GenerationNames,
    #[sea_orm(has_many = "super::item_flavor_text::Entity")]
    ItemFlavorText,
    #[sea_orm(has_many = "super::item_names::Entity")]
    ItemNames,
    #[sea_orm(has_many = "super::item_pocket_names::Entity")]
    ItemPocketNames,
    #[sea_orm(has_many = "super::location_names::Entity")]
    LocationNames,
    #[sea_orm(has_many = "super::move_flavor_text::Entity")]
    MoveFlavorText,
    #[sea_orm(has_many = "super::move_names::Entity")]
    MoveNames,
    #[sea_orm(has_many = "super::pokemon_color_names::Entity")]
    PokemonColorNames,
    #[sea_orm(has_many = "super::pokemon_species_flavor_text::Entity")]
    PokemonSpeciesFlavorText,
    #[sea_orm(has_many = "super::pokemon_species_names::Entity")]
    PokemonSpeciesNames,
    #[sea_orm(has_many = "super::region_names::Entity")]
    RegionNames,
    #[sea_orm(has_many = "super::type_names::Entity")]
    TypeNames,
    #[sea_orm(has_many = "super::version_group_names::Entity")]
    VersionGroupNames,
    #[sea_orm(has_many = "super::version_names::Entity")]
    VersionNames,
}

impl Related<super::ability_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AbilityFlavorText.def()
    }
}

impl Related<super::ability_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AbilityNames.def()
    }
}

impl Related<super::berry_firmness_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BerryFirmnessNames.def()
    }
}

impl Related<super::generation_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GenerationNames.def()
    }
}

impl Related<super::item_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemFlavorText.def()
    }
}

impl Related<super::item_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemNames.def()
    }
}

impl Related<super::item_pocket_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemPocketNames.def()
    }
}

impl Related<super::location_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LocationNames.def()
    }
}

impl Related<super::move_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveFlavorText.def()
    }
}

impl Related<super::move_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveNames.def()
    }
}

impl Related<super::pokemon_color_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonColorNames.def()
    }
}

impl Related<super::pokemon_species_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonSpeciesFlavorText.def()
    }
}

impl Related<super::pokemon_species_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonSpeciesNames.def()
    }
}

impl Related<super::region_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RegionNames.def()
    }
}

impl Related<super::type_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TypeNames.def()
    }
}

impl Related<super::version_group_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VersionGroupNames.def()
    }
}

impl Related<super::version_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VersionNames.def()
    }
}

impl Related<super::abilities::Entity> for Entity {
    fn to() -> RelationDef {
        super::ability_names::Relation::Abilities.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::ability_names::Relation::Languages.def().rev())
    }
}

impl Related<super::berry_firmness::Entity> for Entity {
    fn to() -> RelationDef {
        super::berry_firmness_names::Relation::BerryFirmness.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::berry_firmness_names::Relation::Languages.def().rev())
    }
}

impl Related<super::generations::Entity> for Entity {
    fn to() -> RelationDef {
        super::generation_names::Relation::Generations.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::generation_names::Relation::Languages.def().rev())
    }
}

impl Related<super::item_pockets::Entity> for Entity {
    fn to() -> RelationDef {
        super::item_pocket_names::Relation::ItemPockets.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::item_pocket_names::Relation::Languages.def().rev())
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        super::item_names::Relation::Items.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::item_names::Relation::Languages.def().rev())
    }
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        super::location_names::Relation::Locations.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::location_names::Relation::Languages.def().rev())
    }
}

impl Related<super::moves::Entity> for Entity {
    fn to() -> RelationDef {
        super::move_names::Relation::Moves.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::move_names::Relation::Languages.def().rev())
    }
}

impl Related<super::pokemon_colors::Entity> for Entity {
    fn to() -> RelationDef {
        super::pokemon_color_names::Relation::PokemonColors.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::pokemon_color_names::Relation::Languages.def().rev())
    }
}

impl Related<super::pokemon_species::Entity> for Entity {
    fn to() -> RelationDef {
        super::pokemon_species_names::Relation::PokemonSpecies.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::pokemon_species_names::Relation::Languages
                .def()
                .rev(),
        )
    }
}

impl Related<super::regions::Entity> for Entity {
    fn to() -> RelationDef {
        super::region_names::Relation::Regions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::region_names::Relation::Languages.def().rev())
    }
}

impl Related<super::types::Entity> for Entity {
    fn to() -> RelationDef {
        super::type_names::Relation::Types.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::type_names::Relation::Languages.def().rev())
    }
}

impl Related<super::version_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::version_group_names::Relation::VersionGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::version_group_names::Relation::Languages.def().rev())
    }
}

impl Related<super::versions::Entity> for Entity {
    fn to() -> RelationDef {
        super::version_names::Relation::Versions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::version_names::Relation::Languages.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
