//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "berry_firmness")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub identifier: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::berries::Entity")]
    Berries,
    #[sea_orm(has_many = "super::berry_firmness_names::Entity")]
    BerryFirmnessNames,
}

impl Related<super::berries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Berries.def()
    }
}

impl Related<super::berry_firmness_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BerryFirmnessNames.def()
    }
}

impl Related<super::languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::berry_firmness_names::Relation::Languages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::berry_firmness_names::Relation::BerryFirmness
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
