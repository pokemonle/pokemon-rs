//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "pokemon")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub identifier: String,
    pub species_id: i32,
    pub height: i32,
    pub weight: i32,
    pub base_experience: i32,
    pub order: Option<i32>,
    pub is_default: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::encounters::Entity")]
    Encounters,
    #[sea_orm(has_many = "super::pokemon_abilities::Entity")]
    PokemonAbilities,
    #[sea_orm(has_many = "super::pokemon_moves::Entity")]
    PokemonMoves,
    #[sea_orm(
        belongs_to = "super::pokemon_species::Entity",
        from = "Column::SpeciesId",
        to = "super::pokemon_species::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PokemonSpecies,
    #[sea_orm(has_many = "super::pokemon_stats::Entity")]
    PokemonStats,
    #[sea_orm(has_many = "super::pokemon_types::Entity")]
    PokemonTypes,
}

impl Related<super::encounters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Encounters.def()
    }
}

impl Related<super::pokemon_abilities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonAbilities.def()
    }
}

impl Related<super::pokemon_moves::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonMoves.def()
    }
}

impl Related<super::pokemon_species::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonSpecies.def()
    }
}

impl Related<super::pokemon_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonStats.def()
    }
}

impl Related<super::pokemon_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonTypes.def()
    }
}

impl Related<super::stats::Entity> for Entity {
    fn to() -> RelationDef {
        super::pokemon_stats::Relation::Stats.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::pokemon_stats::Relation::Pokemon.def().rev())
    }
}

impl Related<super::types::Entity> for Entity {
    fn to() -> RelationDef {
        super::pokemon_types::Relation::Types.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::pokemon_types::Relation::Pokemon.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
