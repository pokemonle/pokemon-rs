//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "items")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub identifier: String,
    pub category_id: i32,
    pub cost: i32,
    pub fling_power: Option<i32>,
    pub fling_effect_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::evolution_chains::Entity")]
    EvolutionChains,
    #[sea_orm(
        belongs_to = "super::item_categories::Entity",
        from = "Column::CategoryId",
        to = "super::item_categories::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ItemCategories,
    #[sea_orm(has_many = "super::item_flavor_text::Entity")]
    ItemFlavorText,
    #[sea_orm(
        belongs_to = "super::item_fling_effects::Entity",
        from = "Column::FlingEffectId",
        to = "super::item_fling_effects::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ItemFlingEffects,
    #[sea_orm(has_many = "super::item_names::Entity")]
    ItemNames,
}

impl Related<super::evolution_chains::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EvolutionChains.def()
    }
}

impl Related<super::item_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemCategories.def()
    }
}

impl Related<super::item_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemFlavorText.def()
    }
}

impl Related<super::item_fling_effects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemFlingEffects.def()
    }
}

impl Related<super::item_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemNames.def()
    }
}

impl Related<super::languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::item_names::Relation::Languages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::item_names::Relation::Items.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
