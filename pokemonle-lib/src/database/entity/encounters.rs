//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "encounters")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub version_id: i32,
    pub location_area_id: i32,
    pub encounter_slot_id: i32,
    pub pokemon_id: i32,
    pub min_level: i32,
    pub max_level: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::encounter_condition_value_map::Entity")]
    EncounterConditionValueMap,
    #[sea_orm(
        belongs_to = "super::encounter_slots::Entity",
        from = "Column::EncounterSlotId",
        to = "super::encounter_slots::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EncounterSlots,
    #[sea_orm(
        belongs_to = "super::location_areas::Entity",
        from = "Column::LocationAreaId",
        to = "super::location_areas::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    LocationAreas,
    #[sea_orm(
        belongs_to = "super::pokemon::Entity",
        from = "Column::PokemonId",
        to = "super::pokemon::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Pokemon,
    #[sea_orm(
        belongs_to = "super::versions::Entity",
        from = "Column::VersionId",
        to = "super::versions::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Versions,
}

impl Related<super::encounter_condition_value_map::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EncounterConditionValueMap.def()
    }
}

impl Related<super::encounter_slots::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EncounterSlots.def()
    }
}

impl Related<super::location_areas::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LocationAreas.def()
    }
}

impl Related<super::pokemon::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pokemon.def()
    }
}

impl Related<super::versions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Versions.def()
    }
}

impl Related<super::encounter_condition_values::Entity> for Entity {
    fn to() -> RelationDef {
        super::encounter_condition_value_map::Relation::EncounterConditionValues.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::encounter_condition_value_map::Relation::Encounters
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
