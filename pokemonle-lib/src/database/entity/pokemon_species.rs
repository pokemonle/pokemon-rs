//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "pokemon_species")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub identifier: String,
    pub generation_id: i32,
    pub evolves_from_species_id: Option<i32>,
    pub evolution_chain_id: Option<i32>,
    pub color_id: i32,
    pub shape_id: i32,
    pub habitat_id: Option<i32>,
    pub gender_rate: Option<i32>,
    pub capture_rate: Option<i32>,
    pub base_happiness: Option<i32>,
    pub is_baby: bool,
    pub hatch_counter: i32,
    pub has_gender_differences: bool,
    pub growth_rate_id: i32,
    pub forms_switchable: bool,
    pub is_legendary: bool,
    pub is_mythical: bool,
    pub order: i32,
    pub conquest_order: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::evolution_chains::Entity",
        from = "Column::EvolutionChainId",
        to = "super::evolution_chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EvolutionChains,
    #[sea_orm(
        belongs_to = "super::generations::Entity",
        from = "Column::GenerationId",
        to = "super::generations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Generations,
    #[sea_orm(
        belongs_to = "super::growth_rates::Entity",
        from = "Column::GrowthRateId",
        to = "super::growth_rates::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GrowthRates,
    #[sea_orm(has_many = "super::pokemon::Entity")]
    Pokemon,
    #[sea_orm(
        belongs_to = "super::pokemon_colors::Entity",
        from = "Column::ColorId",
        to = "super::pokemon_colors::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PokemonColors,
    #[sea_orm(has_many = "super::pokemon_egg_groups::Entity")]
    PokemonEggGroups,
    #[sea_orm(
        belongs_to = "super::pokemon_habitats::Entity",
        from = "Column::HabitatId",
        to = "super::pokemon_habitats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PokemonHabitats,
    #[sea_orm(
        belongs_to = "super::pokemon_shapes::Entity",
        from = "Column::ShapeId",
        to = "super::pokemon_shapes::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PokemonShapes,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::EvolvesFromSpeciesId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::pokemon_species_flavor_text::Entity")]
    PokemonSpeciesFlavorText,
    #[sea_orm(has_many = "super::pokemon_species_names::Entity")]
    PokemonSpeciesNames,
}

impl Related<super::evolution_chains::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EvolutionChains.def()
    }
}

impl Related<super::generations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Generations.def()
    }
}

impl Related<super::growth_rates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GrowthRates.def()
    }
}

impl Related<super::pokemon::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Pokemon.def()
    }
}

impl Related<super::pokemon_colors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonColors.def()
    }
}

impl Related<super::pokemon_egg_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonEggGroups.def()
    }
}

impl Related<super::pokemon_habitats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonHabitats.def()
    }
}

impl Related<super::pokemon_shapes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonShapes.def()
    }
}

impl Related<super::pokemon_species_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonSpeciesFlavorText.def()
    }
}

impl Related<super::pokemon_species_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonSpeciesNames.def()
    }
}

impl Related<super::egg_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::pokemon_egg_groups::Relation::EggGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::pokemon_egg_groups::Relation::PokemonSpecies
                .def()
                .rev(),
        )
    }
}

impl Related<super::languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::pokemon_species_names::Relation::Languages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::pokemon_species_names::Relation::PokemonSpecies
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
