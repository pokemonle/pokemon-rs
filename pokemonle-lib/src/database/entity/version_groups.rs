//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "version_groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(unique)]
    pub identifier: String,
    pub generation_id: i32,
    pub order: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ability_flavor_text::Entity")]
    AbilityFlavorText,
    #[sea_orm(
        belongs_to = "super::generations::Entity",
        from = "Column::GenerationId",
        to = "super::generations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Generations,
    #[sea_orm(has_many = "super::item_flavor_text::Entity")]
    ItemFlavorText,
    #[sea_orm(has_many = "super::move_flavor_text::Entity")]
    MoveFlavorText,
    #[sea_orm(has_many = "super::pokedex_version_groups::Entity")]
    PokedexVersionGroups,
    #[sea_orm(has_many = "super::pokemon_moves::Entity")]
    PokemonMoves,
    #[sea_orm(has_many = "super::version_group_names::Entity")]
    VersionGroupNames,
    #[sea_orm(has_many = "super::versions::Entity")]
    Versions,
}

impl Related<super::ability_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AbilityFlavorText.def()
    }
}

impl Related<super::generations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Generations.def()
    }
}

impl Related<super::item_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ItemFlavorText.def()
    }
}

impl Related<super::move_flavor_text::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveFlavorText.def()
    }
}

impl Related<super::pokedex_version_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokedexVersionGroups.def()
    }
}

impl Related<super::pokemon_moves::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PokemonMoves.def()
    }
}

impl Related<super::version_group_names::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VersionGroupNames.def()
    }
}

impl Related<super::versions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Versions.def()
    }
}

impl Related<super::languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::version_group_names::Relation::Languages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::version_group_names::Relation::VersionGroups
                .def()
                .rev(),
        )
    }
}

impl Related<super::pokedexes::Entity> for Entity {
    fn to() -> RelationDef {
        super::pokedex_version_groups::Relation::Pokedexes.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::pokedex_version_groups::Relation::VersionGroups
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
