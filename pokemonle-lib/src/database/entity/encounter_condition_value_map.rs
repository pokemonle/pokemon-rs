//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    schemars :: JsonSchema,
    aide :: OperationIo,
)]
#[sea_orm(table_name = "encounter_condition_value_map")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub encounter_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub encounter_condition_value_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::encounter_condition_values::Entity",
        from = "Column::EncounterConditionValueId",
        to = "super::encounter_condition_values::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    EncounterConditionValues,
    #[sea_orm(
        belongs_to = "super::encounters::Entity",
        from = "Column::EncounterId",
        to = "super::encounters::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Encounters,
}

impl Related<super::encounter_condition_values::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EncounterConditionValues.def()
    }
}

impl Related<super::encounters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Encounters.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
